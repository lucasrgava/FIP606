{
  "hash": "446fb3987ad33b5ae68927f2fac8847f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Aula 1\"\nformat: html\neditor: visual\n---\n\n\n# Criando um projeto\n\nAntes de começarmos a desenvolver códigos com foco em análise de dados, vamos iniciar criando um projeto, em R, para que nossos arquivos fiquem salvos e organizados. Para isso, após a instalação dos Softwares **R** e RStudio, abra o **RStudio** e siga os passos:\n\n## 1° passo\n\nConforme a figura, cliqle no botão \"Create a project\":\n\n![Fonte: O autor.](Prints/criando%20um%20projeto.png){fig-align=\"center\" width=\"200\"}\n\n## 2° passo\n\nNa janela que se abrir, clique na opção \"New Directory\":\n\n![Fonte: O autor.](Prints/Imagem4.png){fig-align=\"center\" width=\"400\"}\n\n## 3° passo\n\nNa nova janela clique em \"New Project\"\n\n![Fonte: O autor.](Prints/Imagem5.png){fig-align=\"center\" width=\"400\"}\n\n## 4° passo\n\nDefina o diretório e clique em 'Creat Project\". Pronto! Seu diretório foi criado. Agora, toda vez que for desenvolver algum código, de um trabalho espefico, salve nesta pasta.\n\n![Fonte: O autor.](Prints/Imagem6.png){fig-align=\"center\" width=\"400\"}\n\n## 5° passo\n\nAgora, vá ao diretório que salvou o projeto e clique no arquivo \".Rproj\". Faça isso toda vez que for trabalhar nele. Ao clicar no arquivo do projeto, o ambiente do RStudio será aberto, clique em \"New File\" \\> \"Quarto Document\". Defina título e autor e clique em \"Create\".\n\n![Fonte: O autor.](Prints/Imagem3.png){fig-align=\"center\" width=\"200\"}\n\nVocê acabou de criar um arquivo .qmd e em sua janela terá algo assim:\n\n![Fonte: O autor.](Prints/Imagem1.png){fig-align=\"center\" width=\"664\"}\n\nComo se pode perceber, esse tipo de arquivo permite alternar entre escrita e comandos. Essas caixas de comando são chamadas de **chuncks** e são nelas que inserimos os códigos de interesse. Para criar um novo código, use o atalho **ctrl + alt + i**.\n\n# Operações matemáticas\n\nPodemos fazer uma analogia do R como uma calculadora inteligente. Para isso, basta que indiquemos por meio de comandos o que precisa ser feito. Vale resaltar que, se você escrever um comando errado, no melhor dos casos retornará uma mensagem de erro. No entanto, se o código rodar, mas, com um erro que você não percebeu, a resposta estará errada, comprometendo suas decisões. Então, tenham atenção ao digitar comandos. Experimente realizar alguma operações matemáticas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2 # adição\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n2 - 2 # subtração\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n2 / 2 # divisão\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\n2 * 2 # multiplicação\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n2 ^ 2 # exponenciação\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n2 ^ (1/2) # raiz quadrada\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.414214\n```\n\n\n:::\n:::\n\n\nObserve o resultado das operações. Isso é um exemplo simples e operações mais complexas podem ser realizadas.\n\n# Criando objetos\n\n## Vetores\n\nAté então, o que foi apresentado, de operações matemáticas, uma calculadora simples faz. Vamos agora criar abjetos, como vetores e data.frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 2\nb = 2\n```\n:::\n\n\nO sinal de atribuição \"\\<-\" ou \"=\" utilizado com frequência serve para associar valores a objetos. Como no exemplo acima, o objeto \"a\" agora vale 2, ou seja, toda vez que chamar este objeto numa operação matemática, será realizado o cálculo com o valor que ele carrega.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nNo entanto, o objeto criado poderia conter mais que um único valor. Vamos criar agora um vetor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- c(1, 2, 3, 4, 5)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n**ATENÇÂO**: Observe que agora o objeto \"b\", antes igual a 2, agora contém os valores inteiros de 1 a 5. Isso acontece porque o valor do objeto \"b\" foi sobrescrito pelo novo vetor. Dessa forma, b = 2, não existe mais.\n\nOperações matemáticas podem ser feitas com esse objeto. Por exemplo, vamos realizar uma operação de multiplicação entre os objetos criados.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na * b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n```\n\n\n:::\n:::\n\n\nNesse caso, observe que cada um dos valores contidos em \"b\" foi multiplicado pelo valor de \"a\". Esse resultado não foi salvo na memória do R, para isso basta adotar o sinal de atribuição.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- a * b\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n```\n\n\n:::\n:::\n\n\nAgora, toda vez que chamar pela variável \"d\", retornará o valor da multiplicação.\n\nUm vetor também pode carregar informações do tipo caracter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnomes <- c(\"Iago\", \"Klaus\", \"Mariana\", \"David\", \"Gabriel\")\nnomes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Iago\"    \"Klaus\"   \"Mariana\" \"David\"   \"Gabriel\"\n```\n\n\n:::\n:::\n\n\n## Data frames\n\nData frames são muito úteis para organizar dados, uma vez que estes permitem que as colunas contenham, por exemplo, valores numéricos ou lógicos ou de caracteres.\n\nUtilizando a função `data.frame()`, inserindo os objetos criados, separado-os por vírgula, e atribuindo a um objeto chamado **df**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(nomes, b, d)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    nomes b  d\n1    Iago 1  2\n2   Klaus 2  4\n3 Mariana 3  6\n4   David 4  8\n5 Gabriel 5 10\n```\n\n\n:::\n:::\n\n\nEm análise de dados, esse tipo de estrutura é muito utilizado e vamos utilizar bastante no decorrer dessa disciplina de análise.\n\n# Carregando pacotes\n\nAs vezes existem algumas funções de outros pacotes que não são carregadas automaticamente quando se inicia o R. Nesses casos, é preciso carregar o pacote que contém a função de interesse, para isso usamos a função `library()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) # Carregando funções do pacote ggplot2\n```\n:::\n\n\nPode acontecer que a função gere um erro no carregamento, provavelmente porque o pacote ainda não foi instalado. Para instalar um pacote basta usar a fução `install.packages()`. Após a instalação, é preciso carregar o novo pacote utilizando a função `library()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages()\n```\n:::\n\n\n# Pedindo ajuda\n\nQuando tiver dúvida sobre como usar alguma função, execute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?data.frame # ajuda para a função \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstarting httpd help server ... done\n```\n\n\n:::\n:::\n\n\nUma janela com informações sobe a função será aberta.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}